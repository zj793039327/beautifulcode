<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>二叉树对比展示</title>
  <!-- 引入 Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      overflow: hidden;
    }
    /* 左侧侧边栏样式 */
    .sidebar {
      background-color: #343a40;
      color: #fff;
      height: 100vh;
      padding: 20px;
    }
    .sidebar h4 {
      text-align: center;
      margin-bottom: 1rem;
    }
    .sidebar .btn {
      margin-bottom: 0.5rem;
      text-align: left;
    }
    /* 右侧主区域 */
    .main-content {
      height: 100vh;
      overflow-y: auto;
      padding: 20px;
    }
    /* 固定尺寸的树容器 */
    .tree-container {
      position: relative;
      width: 100%;
      height: 400px;
      border: 1px solid #ccc;
      overflow: auto;
      background-color: #fff;
    }
    /* 节点样式 */
    .node {
      position: absolute;
      border: 2px solid #4CAF50;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      background: #fff;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s;
    }
    .node.highlight {
      background: yellow;
    }
    .node.different {
      border-color: red;
      color: red;
    }
    /* 右下角设置面板 */
    .settings-panel {
      position: fixed;
      bottom: 10px;
      right: 10px;
      width: 260px;
      z-index: 1050;
    }
    .card-header {
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="container-fluid">
    <div class="row">
      <!-- 左侧菜单 -->
      <div class="col-md-2 sidebar">
        <h4>操作菜单</h4>
        <button class="btn btn-secondary w-100" onclick="rebuildRightTree()">重新生成右侧树</button>
        <button class="btn btn-secondary w-100" onclick="clearRightTree()">清空右侧树</button>
        <button class="btn btn-secondary w-100" onclick="alert('其他操作')">其他操作</button>
      </div>
      <!-- 右侧主区域 -->
      <div class="col-md-10 main-content">
        <div class="row">
          <!-- 树 1 面板 -->
          <div class="col-md-6 mb-4">
            <div class="card">
              <div class="card-header">树 1</div>
              <div class="card-body">
                <div class="input-group mb-3">
                  <input type="text" id="treeInput1" class="form-control" placeholder="输入数组，如：1,2,3,null,4">
                  <button class="btn btn-primary" onclick="drawTree('treeContainer1', 'treeInput1', true)">生成</button>
                </div>
                <div id="treeContainer1" class="tree-container"></div>
              </div>
            </div>
          </div>
          <!-- 树 2 面板 -->
          <div class="col-md-6 mb-4">
            <div class="card">
              <div class="card-header">树 2</div>
              <div class="card-body">
                <div class="input-group mb-3">
                  <input type="text" id="treeInput2" class="form-control" placeholder="输入数组，如：1,2,3,null,4">
                  <button class="btn btn-primary" onclick="drawTree('treeContainer2', 'treeInput2', false)">生成</button>
                </div>
                <div id="treeContainer2" class="tree-container"></div>
              </div>
            </div>
          </div>
        </div>
      </div> <!-- main-content end -->
    </div> <!-- row end -->
  </div> <!-- container-fluid end -->

  <!-- 右下角设置面板 -->
  <div class="settings-panel">
    <div class="card">
      <div class="card-header" onclick="toggleSettings()">
        设置面板 <span id="settingsIcon">&#9660;</span>
      </div>
      <div class="card-body" id="settingsContent">
        <div class="mb-3">
          <label for="nodeSizeSlider" class="form-label">节点大小（半径）：<span id="nodeSizeValue">20</span>px</label>
          <input type="range" class="form-range" id="nodeSizeSlider" min="10" max="60" value="20" oninput="updateSettings()">
        </div>
        <div class="mb-3">
          <label for="horizontalSlider" class="form-label">水平间距倍率：<span id="horizontalValue">4</span></label>
          <input type="range" class="form-range" id="horizontalSlider" min="1" max="10" value="4" oninput="updateSettings()">
        </div>
        <div class="mb-3">
          <label for="verticalSlider" class="form-label">垂直间距倍率：<span id="verticalValue">5</span></label>
          <input type="range" class="form-range" id="verticalSlider" min="1" max="10" value="5" oninput="updateSettings()">
        </div>
      </div>
    </div>
  </div>

  <!-- 引入 Bootstrap 5 JS（依赖 Popper.js） -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
  <script>
    // 定义二叉树节点
    class TreeNode {
      constructor(val) {
        this.val = val;
        this.left = null;
        this.right = null;
        this.x = 0;
        this.y = 0;
      }
    }

    // 全局变量：节点半径，以及水平、垂直间距倍率
    let NODE_RADIUS = 20;
    let horizontalMultiplier = 4;
    let verticalMultiplier = 5;
    let firstTreeValues = new Set();

    // 数组转二叉树（层序构建）
    function arrayToTree(arr) {
      if (!arr || arr.length === 0) return null;
      const root = new TreeNode(arr[0]);
      const queue = [root];
      let i = 1;
      while (i < arr.length) {
        const current = queue.shift();
        if (arr[i] !== null && arr[i] !== undefined) {
          current.left = new TreeNode(arr[i]);
          queue.push(current.left);
        }
        i++;
        if (i < arr.length && arr[i] !== null && arr[i] !== undefined) {
          current.right = new TreeNode(arr[i]);
          queue.push(current.right);
        }
        i++;
      }
      return root;
    }

    // 采用中序遍历计算节点位置
    function calculatePositions(root) {
      let currentX = 0;
      function dfs(node, depth) {
        if (!node) return;
        dfs(node.left, depth + 1);
        node.x = currentX * (NODE_RADIUS * horizontalMultiplier);
        node.y = depth * (NODE_RADIUS * verticalMultiplier);
        currentX++;
        dfs(node.right, depth + 1);
      }
      dfs(root, 0);
    }

    // 计算树所有节点的边界
    function computeBounds(root) {
      let maxX = 0, maxY = 0;
      function traverse(node) {
        if (!node) return;
        maxX = Math.max(maxX, node.x);
        maxY = Math.max(maxY, node.y);
        traverse(node.left);
        traverse(node.right);
      }
      traverse(root);
      return {
        width: maxX + NODE_RADIUS * 2,
        height: maxY + NODE_RADIUS * 2
      };
    }

    // 绘制二叉树，isFirstTree 为 true 表示绘制第一棵树
    function drawTree(containerId, inputId, isFirstTree) {
      const container = document.getElementById(containerId);
      container.innerHTML = ''; // 清空容器
      
      let input = document.getElementById(inputId).value.replace(/[\[\]]/g, '');
      const arr = input.split(',').map(item => item.trim() === 'null' ? null : Number(item));
      const root = arrayToTree(arr);
      if (!root) return;
      
      calculatePositions(root);
      const bounds = computeBounds(root);
      
      // 创建 SVG 用于绘制连线
      const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.style.width = bounds.width + 'px';
      svg.style.height = bounds.height + 'px';
      svg.setAttribute('viewBox', `0 0 ${bounds.width} ${bounds.height}`);
      container.appendChild(svg);
      
      // 如果是第一棵树，则记录所有节点值
      if (isFirstTree) {
        firstTreeValues.clear();
        function storeValues(node) {
          if (!node) return;
          firstTreeValues.add(node.val);
          storeValues(node.left);
          storeValues(node.right);
        }
        storeValues(root);
      }
      
      // 递归绘制节点及连线
      function drawNode(node) {
        if (!node) return;
    
        const div = document.createElement('div');
        div.className = 'node';
        div.style.width = `${NODE_RADIUS * 2}px`;
        div.style.height = `${NODE_RADIUS * 2}px`;
        div.style.left = `${node.x}px`;
        div.style.top = `${node.y}px`;
        div.textContent = node.val;
    
        if (!isFirstTree && !firstTreeValues.has(node.val)) {
          div.classList.add('different');
        }
    
        div.addEventListener('click', () => highlightMatchingNodes(node.val));
        container.appendChild(div);
    
        [node.left, node.right].forEach(child => {
          if (child) {
            const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
            line.setAttribute('x1', node.x + NODE_RADIUS);
            line.setAttribute('y1', node.y + NODE_RADIUS * 2);
            line.setAttribute('x2', child.x + NODE_RADIUS);
            line.setAttribute('y2', child.y);
            line.setAttribute('stroke', '#ccc');
            line.setAttribute('stroke-width', '2');
            svg.appendChild(line);
          }
        });
        drawNode(node.left);
        drawNode(node.right);
      }
      drawNode(root);
    }
    
    function highlightMatchingNodes(value) {
      document.querySelectorAll('.node').forEach(node => {
        if (node.textContent == value) {
          node.classList.add('highlight');
        } else {
          node.classList.remove('highlight');
        }
      });
    }
    
    // 更新设置并重绘树
    function updateSettings() {
      NODE_RADIUS = parseInt(document.getElementById('nodeSizeSlider').value, 10);
      horizontalMultiplier = parseFloat(document.getElementById('horizontalSlider').value);
      verticalMultiplier = parseFloat(document.getElementById('verticalSlider').value);
      
      document.getElementById('nodeSizeValue').textContent = NODE_RADIUS;
      document.getElementById('horizontalValue').textContent = horizontalMultiplier;
      document.getElementById('verticalValue').textContent = verticalMultiplier;
      
      const treeInput1 = document.getElementById('treeInput1');
      if (treeInput1.value.trim() !== "") {
        drawTree('treeContainer1', 'treeInput1', true);
      }
      const treeInput2 = document.getElementById('treeInput2');
      if (treeInput2.value.trim() !== "") {
        drawTree('treeContainer2', 'treeInput2', false);
      }
    }
    
    // 左侧菜单按钮操作：重新生成右侧树
    function rebuildRightTree() {
      const treeInput2 = document.getElementById('treeInput2');
      if (treeInput2.value.trim() !== "") {
        drawTree('treeContainer2', 'treeInput2', false);
      } else {
        alert("请在右侧树输入框中输入数组数据！");
      }
    }
    
    // 左侧菜单按钮操作：清空右侧树
    function clearRightTree() {
      document.getElementById('treeContainer2').innerHTML = "";
    }
    
    // 折叠/展开右下角设置面板
    function toggleSettings() {
      const settingsContent = document.getElementById('settingsContent');
      const settingsIcon = document.getElementById('settingsIcon');
      if (settingsContent.style.display === "none") {
        settingsContent.style.display = "block";
        settingsIcon.innerHTML = "&#9660;";
      } else {
        settingsContent.style.display = "none";
        settingsIcon.innerHTML = "&#9650;";
      }
    }
  </script>
</body>
</html>
